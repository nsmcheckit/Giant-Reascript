-- Script generated by Lokasenna's GUI Builder


local lib_path = reaper.GetExtState("Lokasenna_GUI", "lib_path_v2")
if not lib_path or lib_path == "" then
    reaper.MB("Couldn't load the Lokasenna_GUI library. Please install 'Lokasenna's GUI library v2 for Lua', available on ReaPack, then run the 'Set Lokasenna_GUI v2 library path.lua' script in your Action List.", "Whoops!", 0)
    return
end
loadfile(lib_path .. "Core.lua")()


GUI.req("Classes/Class - Frame.lua")()
GUI.req("Classes/Class - Textbox.lua")()
GUI.req("Classes/Class - Button.lua")()


-- If any of the requested libraries weren't found, abort the script.
if missing_lib then return 0 end


GUI.name = "Export item list to CSV/TXT - bbs"
GUI.x, GUI.y, GUI.w, GUI.h = 0, 0, 512, 256
GUI.anchor, GUI.corner = "mouse", "C"


-- Show reaper console messages.

function show_msg(m)
  reaper.ClearConsole()
  reaper.ShowConsoleMsg(tostring(m) .. "\n")
end


-- Show reaper messege box.

function show_msg_box(m, t)
  reaper.ShowMessageBox( m, t, 0 )
end


-- Get the proper separation according to the operating system.

function get_separation()
  if reaper.GetOS() == "Win32" or reaper.GetOS() == "Win64" 
  then
    return "\\"
  else
    return "/"
  end
end


-- Get the active project path.

function get_project_path()
  return reaper.GetProjectPath("buf")
end


-- Get the active project name.

function get_project_name()
  local project_name = reaper.GetProjectName("", "")
  local project_name_revised = string.match(project_name, "(.+)%.%a+" )
  return project_name_revised
end


-- The Helper function of sorting items.

function sort_items(a,b)
  if (a.position < b.position) then
  return true
  end
end


-- CSV Header

function get_csv_header()
  local header = "Track,Stamp,Event\n"
  return header
end


-- Get all the selected items.

function get_selected_items()
  local item_table = {}
  local item_num = reaper.CountSelectedMediaItems(0)
  
  if item_num == 0 then
    show_msg_box("Please select at least 1 item.", "Opps!")
    return false, item_table
  end
  for i=0, item_num+1 do
    local item = reaper.GetSelectedMediaItem(0, i)
    if item == nil then
      goto next_item
    end
    
    local position = reaper.GetMediaItemInfo_Value(item, "D_POSITION")
    local track = reaper.GetMediaItem_Track(item)
    local bool, track_name = reaper.GetTrackName(track, "buf")
    local take = reaper.GetActiveTake(item)
    
   -- if take ~= nil then
   -- local bool,first_track_name = reaper.GetTrackName(track)
   -- end
    
    if take ~= nil then
      local take_name = string.match(reaper.GetTakeName(take), "(.+)%.%a+") or string.match(reaper.GetTakeName(take), "(.+)")
      item_table[#item_table+1] = {}
      item_table[#item_table].take_name = take_name
      item_table[#item_table].position = position
      item_table[#item_table].track_name = track_name
      item_table[#item_table].montage = GUI.Val("File Name")
      bool,item_table[#item_table].type = first_track_name
    end
    ::next_item::
  end
  
    return true, item_table
end


-- Report the reference item name.

function report_ref_item()
  local r, data_table = get_selected_items()
  if r and #data_table > 0 then
    return data_table[1].take_name
  end
end


-- Export CSV

function expoert_csv()
  local r, data_table = get_selected_items()
  if r and #data_table > 0 then
    table.sort(data_table, sort_items)
    local header = get_csv_header()
    local start_point = data_table[1].position
    local print_s = header
    
    
    for i=2, #data_table do
      print_s = print_s .. data_table[i].track_name .. "," .. data_table[i].position - start_point .. "," .. GUI.elms.Character.retval .. "_"  .. GUI.elms.Skill.retval .. "_" .. data_table[i].take_name .. "_" ..  data_table[i].track_name .. "\n"
    end
    
    show_msg(print_s)
    
    -- Write CSV 
    
    local separation = get_separation()
    local path = GUI.Val("File Path") .. separation .. GUI.Val("File Name") .. ".csv"
    local file = io.open(path, "w+")
    file:write(print_s)
    io.close(file)
  end
end


-- Export txt

function expoert_txt()
  local r, data_table = get_selected_items()
  if r and #data_table > 0 then
    table.sort(data_table, sort_items)
    local header = get_csv_header()
    local start_point = data_table[1].position
    local print_s = header
    
    for i=2, #data_table do
      print_s = print_s .. data_table[i].track_name .. "," .. data_table[i].position - start_point .. "," .. GUI.elms.Character.retval .. "_"  .. GUI.elms.Skill.retval .. "_" .. data_table[i].take_name .. "_" ..  data_table[i].track_name .. "\n"
    end
    
    show_msg(print_s)
    
    -- Write TXT 
    
    local separation = get_separation()
    local path = GUI.Val("File Path") .. separation .. GUI.Val("File Name") .. ".txt"
    local file = io.open(path, "w+")
    file:write(print_s)
    io.close(file)
  end
end

-- Export Json

function expoert_Json()
  local r, data_table = get_selected_items()
  if r and #data_table > 0 then
    table.sort(data_table, sort_items)
    local header = get_csv_header()
    local start_point = data_table[1].position
    local item_num = reaper.CountSelectedMediaItems(0)
    local print_s = "["
    for i=1, #data_table do
      print_s = print_s 
      .. "{"
      .. "\"Character\":" .. "\"" ..GUI.elms.Character.retval .. "\"" .. ","
      .. "\"Skill\":" .. "\"" .. data_table[i].track_name .. "\"" .. ","
      .. "\"Item\":" .. "\"" .. data_table[i].take_name .. "\"" .. ","
      .. "\"Type\":" ..  "\"" .. data_table[i].track_name .. "\"" .. ","
      .. "\"Event\":" .. "\"\"" .. ","
      .. "\"montage\":" .. "\"" .. GUI.Val("File Name") .. "\"" .. "," 
      .. "\"path\":\"\"" .. "," 
      .. "\"trackIndex\":" .. "-1," 
      .. "\"trackName\":" .. "\"" .. data_table[i].track_name .. "\"" .. "," 
      .. "\"triggerTime\":" .. data_table[i].position - start_point .. "," 
      .. "\"attachName\":" .. "\"" .. GUI.elms.AttachName.retval .. "\"" .. "," 
      .. "\"bFollow\":true" 
      .. "}"
      if i < item_num then
        print_s = print_s .. ","
      end
    end
    print_s = print_s .. "]"
    show_msg(print_s)
    
    -- Write Json 
    
    local separation = get_separation()
    local path = GUI.Val("File Path") .. separation .. GUI.Val("File Name") .. ".json"
    local file = io.open(path, "w+")
    file:write(print_s)
    io.close(file)
  end
end


-- Re run

function re_run()
  GUI.Val("File Path", get_project_path())
  GUI.Val("File Name",  report_ref_item())
  GUI.Val("Ref Item", report_ref_item())
end


GUI.New("Export CSV", "Button", {
    z = 11,
    x = 304,
    y = 200,
    w = 80,
    h = 24,
    caption = "Export CSV",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = expoert_csv
})

GUI.New("Export TXT", "Button", {
    z = 11,
    x = 400,
    y = 200,
    w = 80,
    h = 24,
    caption = "Export TXT",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = expoert_txt
})

GUI.New("Export Json", "Button", {
    z = 11,
    x = 208,
    y = 200,
    w = 80,
    h = 24,
    caption = "Export Json",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = expoert_Json
})

GUI.New("Re Run", "Button", {
    z = 11,
    x = 24,
    y = 200,
    w = 80,
    h = 24,
    caption = "Re Run",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = re_run
})



GUI.New("File Name", "Textbox", {
    z = 15.0,
    x = 80,
    y = 32,
    w = 400,
    h = 20,
    caption = "File Name",
    cap_pos = "left",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.New("Ref Item", "Textbox", {
    z = 15.0,
    x = 80,
    y = 64,
    w = 400,
    h = 20,
    caption = "Ref Item",
    cap_pos = "left",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.New("File Path", "Textbox", {
    z = 15.0,
    x = 80,
    y = 96,
    w = 400,
    h = 20,
    caption = "File Path",
    cap_pos = "left",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.New("Character", "Textbox", {
    z = 15.0,
    x = 80,
    y = 128,
    w = 400,
    h = 20,
    caption = "Character",
    cap_pos = "left",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.New("AttachName", "Textbox", {
    z = 15.0,
    x = 80,
    y = 160,
    w = 400,
    h = 20,
    caption = "AttachName",
    cap_pos = "left",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.New("Frame1", "Frame", {
    z = 20.0,
    x = 0,
    y = 0,
    w = 512,
    h = 256,
    shadow = false,
    fill = false,
    color = "elm_frame",
    bg = "wnd_bg",
    round = 0,
    text = "",
    txt_indent = 0,
    txt_pad = 0,
    pad = 4,
    font = 4,
    col_txt = "txt"
})


GUI.Init()
GUI.Main()
GUI.Val("File Path", get_project_path())
GUI.Val("File Name",  report_ref_item())
GUI.Val("Ref Item", report_ref_item())
